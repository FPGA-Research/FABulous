import argparse
import os
from contextlib import redirect_stdout
from pathlib import Path

from loguru import logger

from FABulous.FABulous_CLI.FABulous_CLI import FABulous_CLI
from FABulous.FABulous_CLI.helper import (
    create_project,
    install_oss_cad_suite,
    setup_global_env_vars,
    setup_logger,
    setup_project_env_vars,
)


def main():
    """Main function to start the command line interface of FABulous, sets up argument
    parsing, initialises required components and handles start the FABulous CLI.

    Also logs terminal output and if .FABulous folder is missing.

    Command line arguments
    ----------------------
    project_dir : str
        Directory path to project folder.
    -c, --createProject :  bool
        Flag to create new project.
    -fs, --FABulousScript: str, optional
        Run FABulous with a FABulous script.
    -ts, --TCLscript: str, optional
        Run FABulous with a TCL script.
    -log : str, optional
        Log all the output from the terminal.
    -w, --writer : <'verilog', 'vhdl'>, optional
        Set type of HDL code generated. Currently supports .V and .VHDL (Default .V)
    -md, --metaDataDir : str, optional
        Set output directory for metadata files, e.g. pip.txt, bel.txt
    -v, --verbose : bool, optional
        Show detailed log information including function and line number.
    -gde, --globalDotEnv : str, optional
        Set global .env file path. Default is $FAB_ROOT/.env
    -pde, --projectDotEnv : str, optional
        Set project .env file path. Default is $FAB_PROJ_DIR/.env
    -iocd, --install_oss_cad_suite : str, optional
        Install the oss-cad-suite in the project directory.
    """
    parser = argparse.ArgumentParser(
        description="The command line interface for FABulous"
    )

    create_group = parser.add_mutually_exclusive_group()

    create_group.add_argument(
        "-c",
        "--createProject",
        default=False,
        action="store_true",
        help="Create a new project",
    )

    create_group.add_argument(
        "-iocs",
        "--install_oss_cad_suite",
        help="Install the oss-cad-suite in the directory."
        "This will create a new directory called oss-cad-suite in the provided"
        "directory and install the oss-cad-suite there."
        "If there is already a directory called oss-cad-suite, it will be removed and replaced with a new one."
        "This will also automatically add the FAB_OSS_CAD_SUITE env var in the global FABulous .env file. ",
        action="store_true",
        default=False,
    )

    script_group = parser.add_mutually_exclusive_group()

    parser.add_argument(
        "project_dir",
        help="The directory to the project folder",
    )

    script_group.add_argument(
        "-fs",
        "--FABulousScript",
        default="",
        help="Run FABulous with a FABulous script. A FABulous script is a text file containing only FABulous commands"
        "This will automatically exit the CLI once the command finish execution, and the exit will always happen gracefully.",
        type=Path,
    )

    script_group.add_argument(
        "-ts",
        "--TCLScript",
        default="",
        help="Run FABulous with a TCL script. A TCL script is a text file containing a mix of TCL commands and FABulous commands."
        "This will automatically exit the CLI once the command finish execution, and the exit will always happen gracefully.",
        type=Path,
    )

    script_group.add_argument(
        "-p",
        "--commands",
        help="execute <commands> (to chain commands, separate them with semicolon + whitespace: 'cmd1; cmd2')",
    )

    parser.add_argument(
        "-log",
        default="",
        type=Path,
        nargs="?",
        const="FABulous.log",
        help="Log all the output from the terminal",
    )

    parser.add_argument(
        "-w",
        "--writer",
        choices=["verilog", "vhdl"],
        help="Set the type of HDL code generated by the tool. Currently support Verilog and VHDL (Default using Verilog)",
    )

    parser.add_argument(
        "-md",
        "--metaDataDir",
        default=".FABulous",
        nargs=1,
        help="Set the output directory for the meta data files eg. pip.txt, bel.txt",
    )

    parser.add_argument(
        "-v",
        "--verbose",
        default=False,
        action="count",
        help="Show detailed log information including function and line number. For -vv additionally output from "
        "FABulator is logged to the shell for the start_FABulator command",
    )

    parser.add_argument(
        "-gde",
        "--globalDotEnv",
        nargs=1,
        help="Set the global .env file path. Default is $FAB_ROOT/.env",
    )

    parser.add_argument(
        "-pde",
        "--projectDotEnv",
        nargs=1,
        help="Set the project .env file path. Default is $FAB_PROJ_DIR/.env",
    )

    parser.add_argument(
        "--force",
        action="store_true",
        help="Force the command to run and ignore any errors",
    )

    parser.add_argument("--debug", action="store_true", help="Enable debug mode")

    args = parser.parse_args()

    setup_logger(args.verbose, args.debug, log_file=args.log)

    if args.createProject:
        create_project(Path(args.project_dir).absolute(), args.writer)
        exit(0)

    if not (Path(args.project_dir).absolute() / ".FABulous").exists():
        logger.error(
            "The directory provided is not a FABulous project as it does not have a .FABulous folder"
        )
        exit(1)

    if not Path(args.project_dir).absolute().exists():
        logger.error(f"The directory provided does not exist: {args.project_dir}")
        exit(1)

    setup_global_env_vars(args)

    projectDir = Path(os.getenv("FAB_PROJ_DIR", args.project_dir)).absolute().resolve()

    if projectDir != Path(args.project_dir).absolute().resolve():
        logger.warning(
            f"The project directory provided ({args.project_dir}) does not match the FAB_PROJ_DIR environment variable ({projectDir})."
            "Overriding user provided project directory with FAB_PROJ_DIR environment variable value."
        )

    args.top = projectDir.stem

    if args.install_oss_cad_suite:
        install_oss_cad_suite(projectDir, True)
        exit(0)

    setup_project_env_vars(args)
    fab_CLI = FABulous_CLI(
        os.getenv("FAB_PROJ_LANG"),
        projectDir,
        Path().cwd(),
        force=args.force,
    )
    fab_CLI.debug = args.debug
    fabScript: Path = args.FABulousScript.absolute()
    tclScript: Path = args.TCLScript.absolute()
    logger.info(f"Setting current working directory to: {projectDir}")
    cwd = Path().cwd()
    os.chdir(projectDir)
    fab_CLI.onecmd_plus_hooks("load_fabric")

    if commands := args.commands:
        commands = commands.split("; ")
        for c in commands:
            fab_CLI.onecmd_plus_hooks(c)
            if fab_CLI.exit_code:
                logger.error(
                    f"Command '{c}' execution failed with exit code {fab_CLI.exit_code}"
                )
                exit(1)
        else:
            logger.info(
                f'Commands "{"; ".join(i.strip() for i in commands)}" executed successfully'
            )
            exit(0)
    elif fabScript != cwd:
        fab_CLI.onecmd_plus_hooks(f"run_script {fabScript}")
        if fab_CLI.exit_code:
            logger.error(
                f"FABulous script {args.FABulousScript} execution failed with exit code {fab_CLI.exit_code}"
            )
        else:
            logger.info(f"FABulous script {args.FABulousScript} executed successfully")

        exit(fab_CLI.exit_code)
    elif tclScript != cwd:
        fab_CLI.onecmd_plus_hooks(f"run_tcl {tclScript}")
        if fab_CLI.exit_code:
            logger.error(
                f"TCL script {args.TCLScript} execution failed with exit code {fab_CLI.exit_code}"
            )
        else:
            logger.info(f"TCL script {args.TCLScript} executed successfully")
        exit(fab_CLI.exit_code)
    else:
        fab_CLI.interactive = True
        if args.verbose == 2:
            fab_CLI.verbose = True

        fab_CLI.cmdloop()
        exit(0)


if __name__ == "__main__":
    main()
